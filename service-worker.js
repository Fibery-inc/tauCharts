"use strict";var precacheConfig=[["/index.html","8b34e154c5bc5df9302c7da6c534c050"],["/static/css/main.0c775cbc.css","ed0f229bb80f6400dc825a9a1eca2b0e"],["/static/media/api.8cf725e9.svg","8cf725e968632876fd8c3bc601d7bf3e"],["/static/media/download-ico.2c877ab8.png","2c877ab895300e827e9830cb0a349cfc"],["/static/media/download-ico2x.4d8274db.png","4d8274db1d121f779eb2edcb30227330"],["/static/media/facets.4f8fa4b1.svg","4f8fa4b1134eec6c5e712d223edf9482"],["/static/media/fb-logo-hover.ce2b31fe.png","ce2b31fea4ed900afbe5eb5d9d8f4d45"],["/static/media/fb-logo-hover2x.f78851e6.png","f78851e6c1aa8ceb353d9b0eb8f399d6"],["/static/media/git-logo-hover.a2c44323.png","a2c44323d4f817a1e70678bfc8c0ec00"],["/static/media/git-logo-hover2x.b19c8d0a.png","b19c8d0af530f5b34c1466733aae4d97"],["/static/media/git-logo.dc02ba8e.png","dc02ba8e01521dfdea3058e523b47b22"],["/static/media/git-logo2x.a95c97a5.png","a95c97a58c7fb1705abe0282d54064d2"],["/static/media/logo-big2x.920a98c9.png","920a98c98e63bc760929e33a424d920a"],["/static/media/logo-color.ede659ba.svg","ede659ba6823b8e18e5fad54a351c356"],["/static/media/main-bg-foot.b165c1f6.svg","b165c1f6366f8711122e5cf7aa1eac9a"],["/static/media/main-bg.678a7ed7.svg","678a7ed773b0d98cc90debf9f70a5468"],["/static/media/plugin.7555df5d.svg","7555df5ddc3296773aff0e31346fb41c"],["/static/media/slack-logo.f074caef.png","f074caef71f27ea004b6deb0a5b533b0"],["/static/media/tw-logo-hover.28dac691.png","28dac691d2ebc37c3890d6cb235784af"],["/static/media/tw-logo-hover2x.58ca190d.png","58ca190ded14e1df0056e7053ce10b95"],["/static/media/uv-logo-hover.9b4e3331.png","9b4e333183cace92b19fd41d0fe22757"],["/static/media/uv-logo-hover2x.9503c417.png","9503c41762ab015dea66857b948ed338"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,a,n){var c=new URL(e);return n&&c.pathname.match(n)||(c.search+=(c.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),c.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return a.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),c=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),c]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(n){return setOfCachedUrls(n).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return n.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,a=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),n="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),e=urlsToCacheKeys.has(a));var c="/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(a=new URL(c,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});